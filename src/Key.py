from SBox import SBox
import PrintHelper as PH

class Key:
    def __init__(self, key, sbox, nk, nr, nb):
        self.sbox = sbox
        self.key = key
        self.keySchedule = []
        self.nk = nk
        self.nr = nr
        self.nb = nb
        self.keyPosition = 0
        self.keyPositionIV = ((self.nr + 1) * self.nk) - 1

        # From Wikipedia... https://en.wikipedia.org/wiki/Rijndael_key_schedule

        self.Rcon = [0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d]
    # end __init__


    def KeyExpansion(self):
        self.keySchedule = [(0x00, 0x00, 0x00, 0x00) for x in range(self.nb*(self.nr+1))]

        i = 0
        while i < self.nk:
            self.keySchedule[i] = (self.key[4*i], self.key[4*i+1], self.key[4*i+2], self.key[4*i+3])
            i = i + 1

        i = self.nk
        while i < self.nb * (self.nr + 1):
            temp = self.keySchedule[(i - 1)]

            if i % self.nk == 0:
                temp = self.xorWord(self.SubWord(self.RotWord(temp)), (self.Rcon[i / self.nk], 0 ,0, 0))

            self.keySchedule[i] = self.xorWord(self.keySchedule[i - self.nk], temp)
            i = i + 1
        # end while
    # end KeyExpansion

    def SubWord(self, word):
        return self.sbox.SubWord(word)
    # end SubWord


    def RotWord(self, word):
        return word[1:] + word[:1]


    def xorWord(self, inputList, val):
        l = []
        for i in range(4):
            l.append(inputList[i] ^ val[i])
        return tuple(l)
    # end xorWord


    def getNextRoundKey(self):
        key1 = self.keySchedule[self.keyPosition]
        key2 = self.keySchedule[self.keyPosition + 1]
        key3 = self.keySchedule[self.keyPosition + 2]
        key4 = self.keySchedule[self.keyPosition + 3]
        self.keyPosition = self.keyPosition + 4

        return [key1, key2, key3, key4]
    # end getNextRoundKey


    def getInvNextRoundKey(self):
        key1 = self.keySchedule[self.keyPositionIV - 3]
        key2 = self.keySchedule[self.keyPositionIV - 2]
        key3 = self.keySchedule[self.keyPositionIV - 1]
        key4 = self.keySchedule[self.keyPositionIV]
        self.keyPositionIV = self.keyPositionIV - 4

        return [key1, key2, key3, key4]
    # end getInvNextRoundKey


    def ReloadSbox(self, newSbox):
        self.sbox = newSbox
        self.KeyExpansion()
